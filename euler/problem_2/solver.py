"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

from functools import lru_cache

def solve():
    fib_sum = 0
    for element in fib_gen():
        if element % 2  == 0:
            fib_sum += element
    return fib_sum


def fib_gen(max_element=4000000):
    """ Generator over fibonacci sequence up to max_element

    Args:
      max_element - int
    """
    idx = 0
    while True:
        next_element = fib_n(idx)
        if next_element < max_element:
            yield next_element
            idx += 1
        else:
            break

# memoizing decorator
@lru_cache(maxsize=None)
def fib_n(n_idx):
    """ Return nth element of fibonacci sequence

    Args:
      n_idx - int

    Return
      fib_{n} - int
    """
    if n_idx < 0:
        return 1
    else:
        return fib_n(n_idx - 1) + fib_n(n_idx - 2)
p
